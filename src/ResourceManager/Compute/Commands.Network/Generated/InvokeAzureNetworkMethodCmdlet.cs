// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure;
using Microsoft.Azure.Commands.Network.Automation.Models;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Network.Automation
{
    [Cmdlet(VerbsLifecycle.Invoke, "AzureNetworkMethod", DefaultParameterSetName = "InvokeByDynamicParameters")]
    [OutputType(typeof(object))]
    public partial class InvokeAzureNetworkMethodCmdlet : NetworkAutomationBaseCmdlet, IDynamicParameters
    {
        protected RuntimeDefinedParameterDictionary dynamicParameters;
        protected object[] argumentList;

        protected static object[] ConvertDynamicParameters(RuntimeDefinedParameterDictionary parameters)
        {
            List<object> paramList = new List<object>();

            foreach (var param in parameters)
            {
                paramList.Add(param.Value.Value);
            }

            return paramList.ToArray();
        }

        [Parameter(Mandatory = true, ParameterSetName = "InvokeByDynamicParameters", Position = 0)]
        [Parameter(Mandatory = true, ParameterSetName = "InvokeByStaticParameters", Position = 0)]
        [ValidateSet(
            "VirtualNetworkGatewayConnectionsCreateOrUpdate",
            "VirtualNetworkGatewayConnectionsDelete",
            "VirtualNetworkGatewayConnectionsGet",
            "VirtualNetworkGatewayConnectionsGetSharedKey",
            "VirtualNetworkGatewayConnectionsList",
            "VirtualNetworkGatewayConnectionsListNext",
            "VirtualNetworkGatewayConnectionsResetSharedKey",
            "VirtualNetworkGatewayConnectionsSetSharedKey",
            "VirtualNetworksCreateOrUpdate",
            "VirtualNetworksDelete",
            "VirtualNetworksGet",
            "VirtualNetworksList",
            "VirtualNetworksListAll",
            "VirtualNetworksListAllNext",
            "VirtualNetworksListNext"
        )]
        public virtual string MethodName { get; set; }

        protected object ParseParameter(object input)
        {
            if (input is PSObject)
            {
                return (input as PSObject).BaseObject;
            }
            else
            {
                return input;
            }
        }

        protected override void ProcessRecord()
        {
            base.ProcessRecord();
            ExecuteClientAction(() =>
            {
                if (ParameterSetName == "InvokeByDynamicParameters")
                {
                    argumentList = ConvertDynamicParameters(dynamicParameters);
                }
                else
                {
                    argumentList = ConvertFromArgumentsToObjects((object[])dynamicParameters["ArgumentList"].Value);
                }

                switch (MethodName)
                {
                    case "VirtualNetworkGatewayConnectionsCreateOrUpdate" :
                        ExecuteVirtualNetworkGatewayConnectionsCreateOrUpdateMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsDelete" :
                        ExecuteVirtualNetworkGatewayConnectionsDeleteMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsGet" :
                        ExecuteVirtualNetworkGatewayConnectionsGetMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsGetSharedKey" :
                        ExecuteVirtualNetworkGatewayConnectionsGetSharedKeyMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsList" :
                        ExecuteVirtualNetworkGatewayConnectionsListMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsListNext" :
                        ExecuteVirtualNetworkGatewayConnectionsListNextMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsResetSharedKey" :
                        ExecuteVirtualNetworkGatewayConnectionsResetSharedKeyMethod(argumentList);
                        break;
                    case "VirtualNetworkGatewayConnectionsSetSharedKey" :
                        ExecuteVirtualNetworkGatewayConnectionsSetSharedKeyMethod(argumentList);
                        break;
                    case "VirtualNetworksCreateOrUpdate" :
                        ExecuteVirtualNetworksCreateOrUpdateMethod(argumentList);
                        break;
                    case "VirtualNetworksDelete" :
                        ExecuteVirtualNetworksDeleteMethod(argumentList);
                        break;
                    case "VirtualNetworksGet" :
                        ExecuteVirtualNetworksGetMethod(argumentList);
                        break;
                    case "VirtualNetworksList" :
                        ExecuteVirtualNetworksListMethod(argumentList);
                        break;
                    case "VirtualNetworksListAll" :
                        ExecuteVirtualNetworksListAllMethod(argumentList);
                        break;
                    case "VirtualNetworksListAllNext" :
                        ExecuteVirtualNetworksListAllNextMethod(argumentList);
                        break;
                    case "VirtualNetworksListNext" :
                        ExecuteVirtualNetworksListNextMethod(argumentList);
                        break;
                    default : WriteWarning("Cannot find the method by name = '" + MethodName + "'."); break;
                }
            });
        }


        public virtual object GetDynamicParameters()
        {
            switch (MethodName)
            {
                    case "VirtualNetworkGatewayConnectionsCreateOrUpdate" : return CreateVirtualNetworkGatewayConnectionsCreateOrUpdateDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsDelete" : return CreateVirtualNetworkGatewayConnectionsDeleteDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsGet" : return CreateVirtualNetworkGatewayConnectionsGetDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsGetSharedKey" : return CreateVirtualNetworkGatewayConnectionsGetSharedKeyDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsList" : return CreateVirtualNetworkGatewayConnectionsListDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsListNext" : return CreateVirtualNetworkGatewayConnectionsListNextDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsResetSharedKey" : return CreateVirtualNetworkGatewayConnectionsResetSharedKeyDynamicParameters();
                    case "VirtualNetworkGatewayConnectionsSetSharedKey" : return CreateVirtualNetworkGatewayConnectionsSetSharedKeyDynamicParameters();
                    case "VirtualNetworksCreateOrUpdate" : return CreateVirtualNetworksCreateOrUpdateDynamicParameters();
                    case "VirtualNetworksDelete" : return CreateVirtualNetworksDeleteDynamicParameters();
                    case "VirtualNetworksGet" : return CreateVirtualNetworksGetDynamicParameters();
                    case "VirtualNetworksList" : return CreateVirtualNetworksListDynamicParameters();
                    case "VirtualNetworksListAll" : return CreateVirtualNetworksListAllDynamicParameters();
                    case "VirtualNetworksListAllNext" : return CreateVirtualNetworksListAllNextDynamicParameters();
                    case "VirtualNetworksListNext" : return CreateVirtualNetworksListNextDynamicParameters();
                    default : break;
            }

            return null;
        }

    }
}
